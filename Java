Q)Largest Element in Array
***************************
LOGIC:
large=arr[0]
for(int i=0;i<arr.length;i++)
if(arr[i]>large)
large=arr[i]
return large
****************************
CODE:
class Compute {
    
    public int largest(int arr[], int n)
    {
            int large=arr[0];
        for(int i=0;i<arr.length;i++){
        if(arr[i]>large){
            large=arr[i];
        }
        }
        return large;
    }
    }
**********************************************************************************************************************************************************
Q)Remove Duplicates from Sorted Array
*************************************
LOGIC:
let:{0,1,1,2,2,3,3,3}
arr[0]=i
arr[0]=j intially
increment i then if i and j values are similar no change if different then increment j by 1 and assigin the i value to j 
**************************************
CODE:
class Solution {
    public int removeDuplicates(int[] nums) {
     int j=0;
     for(int i=0;i<nums.length;i++){
       if(nums[i]!=nums[j]){
         j++;
         nums[j]=nums[i];
       }
     }
     return j+1;
     }
    }
    ****************************************************************************************************************************************************
    Q)Find Second Smallest and Second Largest Element in an array
   *********************************
   LOGIC:
    Largest:
    METHOD 1:
    let:{1,2,4,7,7,5}
    first find largest element and then take or intilize second=-1 and use for(i=0;i<arr.length;i++) as we took second=-1 we comapare -1 with all the
    elements like 1>-1 true 1>2 true 2>4 true 7>4 true but it is larger element so dont take that element next large 5>2 true so 5 is second large element
    large logic :
    int large=arr[0];
    for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                large=arr[i];
            }
     second large logic:
     int second=-1;
     for(int j=0;j<arr.length;j++){
            if(arr[j]>second && arr[j]!=large){
                second=arr[j];
            }
        METHOD 2:
        first take large=arr[0]
        second=any min number so lets take second=0
        large=1 intially second=1 do for loop 1>1 no so large and second is same next 2>1 yes then large=2 then 1 will be second large second=1
        and 4>2 yes large=4 and second=2 7>2 yes second=4 and 7 is repated 5>7 no so large is 7 but we have to check 5 for second also is 7>second
        yes then 4 is replaced with 5 now large=7 and second=5
        for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                second=large///now if the pervious value can be second largest 
                large=arr[i];
            }
            else if(arr[i]<large && arr[i]>second){
                second=arr[i]
                }
        
      **********************************
     SECOND LARGE CODE: in this code we use 2 loops so its o(N+N)=O(2N) its complexity is large
    CODE1:
    class Solution {
    int print2largest(int arr[], int n) {
        int large=arr[0];
        int second=-1;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                large=arr[i];
            }
        for(int j=0;j<arr.length;j++){
            if(arr[j]>second && arr[j]!=large){
                second=arr[j];
            }
        }
        }
       return second;
       }
    }
    CODE2:O(N) COMPLEXITY FOR THIS CODE
   
    class Solution {
    int print2largest(int arr[], int n) {
        int large=arr[0];
        int second=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                second=large;
                large=arr[i];
            }
            else if(arr[i]<large && arr[i]>second){
                second=arr[i];
            }
        }
       return second; }
    }
     SECOND SMALL CODE:
*******************************************************************************************************************************************************
Q)Given an integer array nums, rotate the array to the right by k steps, where k is non-negative
**************************************
LOGIC:
given:{1,2,3,4,5,6,7} and k=3 o/p:{5,6,7,4,3,2,1}--->right rotation
step1:reverse whole orginal array--->{7,6,5,4,3,2,1}
step2:as it is right rotation and k=3 first roate last 3 values ---->{5,6,7,4,3,2,1}
step3: now rotate remaining values --->{5,6,7,4,3,2,1}
***************************************
CODE:
class solution{
   public void leftrotate(int nums[],int k){
         reverse(nums,0,nums.length-1);
         reverse(nums,0,k-1);
         reverse(nums,k,nums.length-1);
         }
   public void reverse(int nums[],int start,int end){
        while(start<end){
            temp=nums[start];
            nums[start]=nums[end];
            nums[end]=temp;
            start++;
            end--;
            }
            }
 *******************************************************************************************************************************************************
 Q)Given an array arr[] of size N and an integer K, the task is to left rotate the array K indexes
 ******************************************
 LOGIC:
 given={1,2,3,4,5,6,7} and k=2 o/p:{ 3,4,5,6,7,1,2}
 step1:reverse entire array {7,6,5,4,3,2,1}
 step2:as it is left rotation reverse last 2 elemnts---->{7,6,5,4,3,1,2}
 step3:now reverse remaining elements---->{3,4,5,6,7,1,2}
 ******************************************
 CODE:
 lass Solution
{
    void leftRotate(long arr[], int k,int n)
    {
        k=k%n;
        if(k<0){
            k=k+n;
        }
        reverse(arr,0,n-1);
        reverse(arr,n-k,n-1);
        reverse(arr,0,n-k-1);
        }
        public void reverse(long arr[],int start,int end){
         while(start<end){
            long temp=arr[start];
            arr[start]=arr[end];
            arr[end]=temp;
            start++;
            end--;
            }
          }
  }
*************************************************************************************************************************************************
Q)Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
****************************************
LOGIC:
given:{4,0,0,5,3}---->o/p:{4,5,3,0,0}
step1: create one temp variable and take i=0 and j=0 initially 
step2:check i!=0 if it is not equal to zero then store it in temp variable
step3:make sure j is always equal to zero if j!=0 do j++
step4:if i!=0 then swap j into i and store temp in j
****************************************
example exp:{4,0,0,5,3}--->intially i=4,j=4
j++ and i++ as in arr[1] and arr[2] i==0 so increment it to 5 i.e at arr[3] now i is in 3rd postion and do j++ as in arr[1] it is j==0
swap arr[1] with arr[3] then {4,5,0,0,3} and do j++ as j is at number:5 as j should always equal to 0 and i++ now i=3
now swap i and j then{4,5,3,0,0}
*****************************************
CODE:
class Solution {
    public void moveZeroes(int[] nums) {
      int temp;
      int j=0;
      for(int i=0;i<nums.length;i++){
          if(nums[i]!=0 ){
              temp=nums[i];
              nums[i]=nums[j];
              nums[j]=temp;
              j++;
          }
          }

        }
}
****************************************************************************************************************************************************
Q)Given an array arr[] sorted in ascending order of size N and an integer K. Check if K is present in the array or not.
****************************************
CODE:
class Solution{
    static int searchInSorted(int arr[], int N, int K)
    {
        for(int i=0;i<N;i++){
            if(arr[i]==K){
            return 1;
            }
            }
       return -1;
       }
 } 
******************************************************************************************************************************************************
Q)Given an integer array nums and an integer val, remove all occurrences of val in nums in-place.
The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the elements which are not equal to val. 
The remaining elements of nums are not important as well as the size of nums.
Return k.
************************************
LOGIC : 
Lets consider an array [3,2,2,3] val=3 we want to the number which is not equal to val at first places 
So first take a variable j=0 and loop in array i.e if we found a number not equal to val number while looping like in question 2 is in second
position then we need to create a temp variable and store i value i.e 3 in temp and shift 2 to the postion of i and value of temp in j postion
and increment j as j finally return j+1 value
*************************************
CODE:
class Solution {
    public int removeElement(int[] nums, int val) {
       int j=0;
       int temp;
       for(int i=0;i<nums.length;i++){
           if(nums[i]!=val){
            temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            j++;
           }
       }
return j;}
}
**********************************************************************************************************************************************
Q)

    

    
   
   
