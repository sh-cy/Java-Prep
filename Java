Q)Largest Element in Array
***************************
LOGIC:
large=arr[0]
for(int i=0;i<arr.length;i++)
if(arr[i]>large)
large=arr[i]
return large
****************************
CODE:
class Compute {
    
    public int largest(int arr[], int n)
    {
            int large=arr[0];
        for(int i=0;i<arr.length;i++){
        if(arr[i]>large){
            large=arr[i];
        }
        }
        return large;
    }
    }
**********************************************************************************************************************************************************
Q)Remove Duplicates from Sorted Array
*************************************
LOGIC:
let:{0,1,1,2,2,3,3,3}
arr[0]=i
arr[0]=j intially
increment i then if i and j values are similar no change if different then increment j by 1 and assigin the i value to j 
**************************************
CODE:
class Solution {
    public int removeDuplicates(int[] nums) {
     int j=0;
     for(int i=0;i<nums.length;i++){
       if(nums[i]!=nums[j]){
         j++;
         nums[j]=nums[i];
       }
     }
     return j+1;
     }
    }
    ****************************************************************************************************************************************************
    Q)Find Second Smallest and Second Largest Element in an array
   *********************************
   LOGIC:
    Largest:
    METHOD 1:
    let:{1,2,4,7,7,5}
    first find largest element and then take or intilize second=-1 and use for(i=0;i<arr.length;i++) as we took second=-1 we comapare -1 with all the
    elements like 1>-1 true 1>2 true 2>4 true 7>4 true but it is larger element so dont take that element next large 5>2 true so 5 is second large element
    large logic :
    int large=arr[0];
    for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                large=arr[i];
            }
     second large logic:
     int second=-1;
     for(int j=0;j<arr.length;j++){
            if(arr[j]>second && arr[j]!=large){
                second=arr[j];
            }
        METHOD 2:
        first take large=arr[0]
        second=any min number so lets take second=0
        large=1 intially second=1 do for loop 1>1 no so large and second is same next 2>1 yes then large=2 then 1 will be second large second=1
        and 4>2 yes large=4 and second=2 7>2 yes second=4 and 7 is repated 5>7 no so large is 7 but we have to check 5 for second also is 7>second
        yes then 4 is replaced with 5 now large=7 and second=5
        for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                second=large///now if the pervious value can be second largest 
                large=arr[i];
            }
            else if(arr[i]<large && arr[i]>second){
                second=arr[i]
                }
        
      **********************************
     SECOND LARGE CODE: in this code we use 2 loops so its o(N+N)=O(2N) its complexity is large
    CODE1:
    class Solution {
    int print2largest(int arr[], int n) {
        int large=arr[0];
        int second=-1;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                large=arr[i];
            }
        for(int j=0;j<arr.length;j++){
            if(arr[j]>second && arr[j]!=large){
                second=arr[j];
            }
        }
        }
       return second;
       }
    }
    CODE2:O(N) COMPLEXITY FOR THIS CODE
   
    class Solution {
    int print2largest(int arr[], int n) {
        int large=arr[0];
        int second=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]>large){
                second=large;
                large=arr[i];
            }
            else if(arr[i]<large && arr[i]>second){
                second=arr[i];
            }
        }
       return second; }
    }
     SECOND SMALL CODE:
*******************************************************************************************************************************************************
Q)Given an integer array nums, rotate the array to the right by k steps, where k is non-negative
**************************************
LOGIC:
given:{1,2,3,4,5,6,7} and k=3 o/p:{5,6,7,4,3,2,1}--->right rotation
step1:reverse whole orginal array--->{7,6,5,4,3,2,1}
step2:as it is right rotation and k=3 first roate last 3 values ---->{5,6,7,4,3,2,1}
step3: now rotate remaining values --->{5,6,7,4,3,2,1}
***************************************
CODE:
class solution{
   public void leftrotate(int nums[],int k){
         reverse(nums,0,nums.length-1);
         reverse(nums,0,k-1);
         reverse(nums,k,nums.length-1);
         }
   public void reverse(int nums[],int start,int end){
        while(start<end){
            temp=nums[start];
            nums[start]=nums[end];
            nums[end]=temp;
            start++;
            end--;
            }
            }
 *******************************************************************************************************************************************************
 Q)Given an array arr[] of size N and an integer K, the task is to left rotate the array K indexes
 ******************************************
 LOGIC:
 given={1,2,3,4,5,6,7} and k=2 o/p:{ 3,4,5,6,7,1,2}
 step1:reverse entire array {7,6,5,4,3,2,1}
 step2:as it is left rotation reverse last 2 elemnts---->{7,6,5,4,3,1,2}
 step3:now reverse remaining elements---->{3,4,5,6,7,1,2}
 ******************************************
 CODE:
 lass Solution
{
    void leftRotate(long arr[], int k,int n)
    {
        k=k%n;
        if(k<0){
            k=k+n;
        }
        reverse(arr,0,n-1);
        reverse(arr,n-k,n-1);
        reverse(arr,0,n-k-1);
        }
        public void reverse(long arr[],int start,int end){
         while(start<end){
            long temp=arr[start];
            arr[start]=arr[end];
            arr[end]=temp;
            start++;
            end--;
            }
            }
            }
     *************************************************************************************************************************************************

    

    
    

    
   
   
